import os
import streamlit.components.v1 as components
from universe import UNIVERSE
from stock_yoy_breakdown import stock_yoy_breakdown
import streamlit as st
import pandas as pd


st.set_page_config(layout="wide")

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
STOCK_DIR = os.path.join(BASE_DIR, 'sec_stock_data')


def fetch_yoy_data(symbol: str) -> pd.DataFrame:
    """
    Reads raw CSV for `symbol`, runs stock_yoy_breakdown,
    returns a DataFrame: rows=metrics, cols=years
    """
    exchange_symbol = symbol.split(":")
    path = os.path.join(STOCK_DIR, f"{exchange_symbol[0]}__{exchange_symbol[1]}.csv")
    raw = pd.read_csv(path)
    return stock_yoy_breakdown(raw)


def format_cell(val):
    """Remove trailing zeros: use general format."""
    if pd.isna(val) or val == "":
        return ""
    try:
        return format(float(val), "g")
    except:
        return val


def highlight_outliers(row: pd.Series) -> list[str]:
    """
    For each row (metrics), highlight the max as green,
    min as red, others blank.
    """
    num = pd.to_numeric(row, errors='coerce')
    if num.notna().sum() == 0:
        return [""] * len(row)
    mx, mn = num.max(), num.min()
    styles = []
    for v in row:
        try:
            f = float(v)
        except:
            styles.append("")
            continue
        if f == mx:
            styles.append("background-color: rgba(0, 255, 0, 0.1)")
        elif f == mn:
            styles.append("background-color: rgba(255, 0, 0, 0.1)")
        else:
            styles.append("")
    return styles


st.title("Deep Value Dashboard")
tabs = st.tabs(["YoY Breakdown", "Live Chart"])
with tabs[0]:
    st.header("Year-over-Year Breakdown")

    symbol = st.selectbox("Select symbol", UNIVERSE)
    df = fetch_yoy_data(symbol)
    df_display = df.copy()

    descr = {
        "Outstanding Sh ": "Total number of shares currently held by all shareholders (millions)",
        "Revenues ": "Total sales generated by the company’s core operations",
        "Revs Avg3": "Smooths out annual swings in revenues",
        "Turnover Avg3": "Efficiency of assets in generating sales (Revenues / Total Assets)",
        "Gross Profit / TOA Avg3": "Gross profit earned per dollar of assets (Gross Profit / Total Assets)",
        "EBIT adj / TOA Avg3": "Operating profit per dollar of assets (Adjusted EBIT / Total Assets)",
        "ROIC Avg3": "After-tax profit generated per dollar of invested capital (NOPAT / Invested Capital)",
        "CROSIC Avg3": "Cash generated per dollar of invested capital (Free Cash Flow / Invested Capital)",
        "GrossMargin Avg3": "Core profitability before overhead (Gross Profit / Revenues)",
        "EBITDA Margin Avg3": "Operating profitability including non-cash charges (EBITDA / Revenues)",
        "Net Inc Margin Avg3": "Bottom-line profitability after all expenses (Net Income / Revenues)",
        "CFO Margin Avg3": "Quality of earnings in cash terms (CFO / Revenues)",
        "SFCF Margin Avg3": "Cash available to equity holders as a percent of sales (Free Cash Flow / Revenues)",
        "NCF Margin Avg3": "Overall cash generation relative to sales (Net Cash Flow / Revenues)",
        "Revs/sh": "Revenue each share represents (Revenues / Outstanding Shares)",
        "Assets/sh": "Asset backing per share (Total Assets / Outstanding Shares)",
        "Book/sh": "Net asset value per share (Shareholders’ Equity / Outstanding Shares)",
        "Net Excess Cash/sh": "Net liquid assets per share after debt (Cash – Debt) / Outstanding Shares",
        "Div/sh": "Cash returned to each share over the period (Dividends / Outstanding Shares)",
        "ROE 3yr%": "Return generated on shareholders’ equity (Net Income / Equity) 3y",
        "ROE 5yr%": "Return generated on shareholders’ equity (Net Income / Equity) 5y",
    }

    # df_display = df_display.reset_index().rename(columns={'index': 'Metric'})
    # df_display.insert(
    #     loc=0,
    #     column="Desc",
    #     value=df_display.Metric.map(lambda idx: descr.get(idx, ""))
    # )
    # df_display = df_display.set_index("Desc")


    styled = (
        df_display
        .style
        .format(format_cell)
        .apply(highlight_outliers, axis=1)
    )

    st.write(f"## {symbol}")
    st.dataframe(styled, use_container_width=True, height=700)

with tabs[1]:
    st.header("Live Chart")

    # Select ticker (same dropdown or new one)
    chart_symbol = st.selectbox("Choose symbol to view chart", UNIVERSE, key="chart_select")

    # --- TradingView Advanced Chart (MAs + drawing tools) ---
    tv_widget_html = f"""
    <div id='tv_chart_container' style='width:100%;height:700px;'></div>
    <script type='text/javascript' src='https://s3.tradingview.com/tv.js'></script>
    <script type='text/javascript'>
      new TradingView.widget({{
        container_id: "tv_chart_container",
        symbol: "{chart_symbol}",
        interval: "D",
        autosize: true,
        theme: "dark",
        style: "1",
        hide_side_toolbar: false,
        withdateranges: true,
        allow_symbol_change: true,
        studies: [
          // {{ id: "RSI@tv-basicstudies", inputs: {{}} }},
          {{ id: "MASimple@tv-basicstudies", inputs: {{ length: 50 }} }},
          {{ id: "MASimple@tv-basicstudies", inputs: {{ length: 200 }} }}
        ],
        studies_overrides: {{
            "relative strength index.rsi.color": "#2196f3",
            "relative strength index.upper band.color": "#2100f5",
            "relative strength index.lower band.color": "#2100f5",
            "relative strength index.upper band.value": 70,
            "relative strength index.lower band.value": 30,
            
            "Moving Average.ma.linewidth":   1,
            "Moving Average.ma.color": "green",
        }},
        support_host: "https://www.tradingview.com"
      }});
    </script>
    """
    components.html(tv_widget_html, height=800, scrolling=False)
